require "events"
require "input/rumble"

local ControlSet = Class(function(self)
    self.controls = {}
end)

function ControlSet:Clear()
    table.clear( self.controls )
end

function ControlSet:IsEmpty()
    return #self.controls == 0
end

function ControlSet:Controls()
    return ipairs( self.controls )
end

function ControlSet:AddControl( control )
    table.insert( self.controls, control )
end

function ControlSet:Has( ... )
    for i = 1, select( "#", ... ) do
        if table.arrayfind( self.controls, select( i, ... )) then
            return true
        end
    end
    return false
end

function ControlSet:Dump()
    local txt = ""
    for i, ctrl in ipairs( self.controls ) do
        txt = txt .. tostring(ctrl) .. " | "
    end
    return txt
end

------------------------------------------------------------------------

Controls = require "input/controls"

InputProxy = Class(function(self)
	self.enable_vibration = Profile:GetVibrationEnabled()
end)

function InputProxy:GetInputDeviceCount()
	return 0
end

function InputProxy:GetInputDeviceName()
	return "not implemented"
end

function InputProxy:GetInputDeviceType()
	return 0
end

function InputProxy:GetLastActiveControllerIndex()
	return 0
end

function InputProxy:IsAnyControllerActive()
	return true
end

function InputProxy:IsAnyControllerConnected()
	return true
end

function InputProxy:IsAnyInputDeviceConnected()
	return false
end

function InputProxy:IsInputDeviceConnected()
	return false
end

function InputProxy:IsInputDeviceEnabled()
	return false
end

function InputProxy:EnableInputDevice()
end

function InputProxy:StartMappingControls()
end

function InputProxy:StopMappingControls(deviceId, controlId, use_default_mapping, use_mapper)
	return nil
end

function InputProxy:GetLocalizedControl(deviceId, controlId, use_default_mapping, use_mapper)
	return nil
end

function InputProxy:MapControl()
end

function InputProxy:CancelMapping()
end

function InputProxy:UnMapControl()
end

function InputProxy:HasMappingChanged()
	return false
end

function InputProxy:LoadCurrentControlMapping()
end

function InputProxy:LoadDefaultControlMapping()
end

function InputProxy:ApplyControlMapping()
end

function InputProxy:LoadControls()
end

function InputProxy:SaveControls()
end

function InputProxy:FlushInput()
end


function InputProxy:SetCursorVisible(visible)
end

function InputProxy:SetOSCursorPos()
end

function InputProxy:EnableVibration(enable)
	self.enable_vibration = enable
end

TheInput = nil

TheInputProxy = InputProxy


--V2C: WELL! this should've been local... =(
--     TheInput is the correct global to reference
--     At this point, gotta leave it in case MODs are using the wrong one =/

Input = Class(function(self)
    self.onkey = EventProcessor()     -- all keys, down and up, with key param
    self.onkeyup = EventProcessor()   -- specific key up, no parameters
    self.onkeydown = EventProcessor() -- specific key down, no parameters
    self.onmousebutton = EventProcessor()

    self.position = EventProcessor()
    self.oncontrol = EventProcessor()
    self.ontextinput = EventProcessor()
    self.ongesture = EventProcessor()

    self.hoverinst = nil
    self.enabledebugtoggle = true

    self.mouse_enabled = IsNotConsole() and not TheNet:IsDedicated()

    self.overridepos = nil
    self.controllerid_cached = nil

    self.cachedControls = {}

    self.mouse_x = 0                                                                          
    self.mouse_y = 0

    self.gamepads = {}
    self.keys = {}
    self.mousebuttons = {}

    self.playing_rumbles = {}

    self.control_state = {}
    self.axis_state = {}

    self.control_set = ControlSet() -- Just exists so we don't have to recreate the table for every input

    self:ResetControlState()
    self:ApplyInputBindings()

    TheInput = self
    TheInputProxy = InputProxy()

    self:DisableAllControllers()


end)


function Input:ResetControlState()
    table.clear(self.control_state)
    table.clear(self.axis_state)

    for k,v in pairs(Controls.Digital) do
        self.control_state[v] = {down = false, t = 0, rep_time = 0}
    end
    for k,v in pairs(Controls.Analog) do
        self.axis_state[v] = {val=0}
    end
end


function Input:ApplyInputBindings()
    local default_binds = require "input/bindings"
    self:SetKeyBinds(default_binds.keyboard)
    self:SetMouseBinds(default_binds.mouse)
    self:SetGamepadBinds(default_binds.gamepad)

    if self.input_settings then
        self.input_settings:ApplyInputBindings( self )
    end
end

function Input:AddKeyBind(binding)
    local bindings = self.keybindings[binding.key]
    if bindings == nil then
        bindings = {}
        self.keybindings[binding.key] = bindings
    end
    table.insert(bindings, binding)
    if #bindings > 1 then
        table.sort(bindings, function(a,b) return (a.control.priority or 0) > (b.control.priority or 0) end)
    end

    self.key_lookup[binding.control] = self.key_lookup[binding.control] or {}
    table.insert(self.key_lookup[binding.control], binding)
end

function Input:SetKeyBinds(bindings)
    self.keybindings = {}
    self.key_lookup = {} -- Maps of Control -> list of bindings   
   
    for k,binding in pairs(bindings) do
        self:AddKeyBind(binding)
    end
end

function Input:SetMouseBinds(bindings)
    self.mousebindings = {}
    self.mouse_lookup = {}

    for k,v in pairs(bindings) do
        if v.control then
            self.mousebindings[v.button] = self.mousebindings[v.button] or {}
            table.insert(self.mousebindings[v.button], v)

            self.mouse_lookup[v.control] = self.mouse_lookup[v.control] or {}
            table.insert(self.mouse_lookup[v.control], v)
        end
    end

    for k, v in pairs(self.mousebindings) do
        table.sort(v, function(a,b) return (a.control.priority or 0) > (b.control.priority or 0) end)
    end
end

function Input:AddGamepadBind(binding)
    local bindings = self.gamepadbindings[binding.button]
    if bindings == nil then
        bindings = {}
        self.gamepadbindings[binding.button] = bindings
    end
    table.insert(bindings, binding)
    if #bindings > 1 then
        table.sort(bindings, function(a,b) return (a.control.priority or 0) > (b.control.priority or 0) end)
    end

    self.gamepad_lookup[binding.control] = self.gamepad_lookup[binding.control] or {}
    table.insert(self.gamepad_lookup[binding.control], binding)
end

function Input:SetGamepadBinds(bindings)
    self.gamepadbindings = {}
    self.gamepad_lookup = {}

    for k,binding in pairs(bindings) do
        self:AddGamepadBind(binding)
    end
end



function Input:DisableAllControllers()
    for i = 1, TheInputProxy:GetInputDeviceCount() - 1 do
        if TheInputProxy:IsInputDeviceEnabled(i) and TheInputProxy:IsInputDeviceConnected(i) then
            TheInputProxy:EnableInputDevice(i, false)
        end
    end
end

function Input:EnableAllControllers()
    for i = 1, TheInputProxy:GetInputDeviceCount() - 1 do
        if TheInputProxy:IsInputDeviceConnected(i) then
            TheInputProxy:EnableInputDevice(i, true)
        end
    end
end

function Input:IsControllerLoggedIn(controller)
    if IsXB1() then
        return TheInputProxy:IsControllerLoggedIn(controller)
    end
    return true
end

function Input:LogUserAsync(controller,cb)
    if IsXB1() then
        TheInputProxy:LogUserAsync(controller,cb)
    else
        cb(true)
    end
end

function Input:LogSecondaryUserAsync(controller,cb)
    if IsXB1() then
        TheInputProxy:LogSecondaryUserAsync(controller,cb)
    else
        cb(true)
    end
end

function Input:EnableMouse(enable)
    self.mouse_enabled = enable and IsNotConsole() and not TheNet:IsDedicated()
end

function Input:ClearCachedController()
    self.controllerid_cached = nil
end

function Input:CacheController()
    self.controllerid_cached = IsNotConsole() and (TheInputProxy:GetLastActiveControllerIndex() or 0) or nil
    return self.controllerid_cached
end

function Input:TryRecacheController()
    return self.controllerid_cached ~= nil and self.controllerid_cached ~= self:CacheController()
end

function Input:GetControllerID()
    return self.controllerid_cached or TheInputProxy:GetLastActiveControllerIndex() or 0
end

function Input:ControllerAttached()
    if self.controllerid_cached ~= nil then
        return self.controllerid_cached > 0
    end
    --Active means connected AND enabled
    return IsConsole() or TheInputProxy:IsAnyControllerActive()
end

function Input:ControllerConnected()
    --V2C: didn't cache this one because it's not used regularly
    return IsConsole() or TheInputProxy:IsAnyControllerConnected()
end

-- Get a list of connected input devices and their ids
function Input:GetInputDevices()
    local devices = {}
    for i = 0, TheInputProxy:GetInputDeviceCount() - 1 do
        if TheInputProxy:IsInputDeviceConnected(i) then
            local device_type = TheInputProxy:GetInputDeviceType(i)
            table.insert(devices, { text = STRINGS.UI.CONTROLSSCREEN.INPUT_NAMES[device_type + 1], data = i })
        end
    end
    return devices
end

function Input:AddTextInputHandler(fn)
    return self.ontextinput:AddEventHandler("text", fn)
end

function Input:AddKeyUpHandler(key, fn)
    return self.onkeyup:AddEventHandler(key, fn)
end

function Input:AddKeyDownHandler(key, fn)
    return self.onkeydown:AddEventHandler(key, fn)
end

function Input:AddKeyHandler(fn)
    return self.onkey:AddEventHandler("onkey", fn)
end

function Input:AddMouseButtonHandler(fn)
    return self.onmousebutton:AddEventHandler("onmousebutton", fn)
end

function Input:AddMoveHandler(fn)
    return self.position:AddEventHandler("move", fn)
end

function Input:AddControlHandler(control, fn)
    return self.oncontrol:AddEventHandler(control, fn)
end

function Input:AddGeneralControlHandler(fn)
    return self.oncontrol:AddEventHandler("oncontrol", fn)
end

function Input:AddControlMappingHandler(fn)
    return self.oncontrol:AddEventHandler("onmap", fn)
end

function Input:AddGestureHandler(gesture, fn)
    return self.ongesture:AddEventHandler(gesture, fn)
end

function Input:UpdatePosition(x, y)
    if self.mouse_enabled then
        self.position:HandleEvent("move", x, y)
    end
end


-- Is for all the button devices (mouse, joystick (even the analog parts), keyboard as well, keyboard
function Input:OnControl(control, digitalvalue, analogvalue)
    --print("OnControl:",control,digitalvalue,analogvalue)
    if control then
        table.insert(self.cachedControls, {control = control, digitalvalue = digitalvalue, analogvalue = analogvalue})
    end
end

function Input:FlushInput()
    TheInputProxy:FlushInput()
    self.cachedControls = {}
end

function Input:ProcessControls()
    local index = 1
    -- don't use an iterator, this table can get flushed from inside a callback
    while index <= #self.cachedControls do
        local v = self.cachedControls[index]
        local control = v.control
	    local digitalvalue = v.digitalvalue
	    local analogvalue = v.analogvalue

        if (self.mouse_enabled or
            (control ~= Controls.Digital.LIGHT_ATTACK_DIRECTIONAL and control ~= Controls.Digital.HEAVY_ATTACK_DIRECTIONAL)) and
            not TheFrontEnd:OnControl(control, digitalvalue) then
            self.oncontrol:HandleEvent(control, digitalvalue, analogvalue)
            self.oncontrol:HandleEvent("oncontrol", control, digitalvalue, analogvalue)
        end
        index = index + 1
    end
    self.cachedControls = {}
end

function Input:OnMouseButton(button, down, x, y)
    if self.mouse_enabled then
        self:SetMousePos(x, y)
        TheFrontEnd:OnMouseButton(button, down, x,y)
        self.onmousebutton:HandleEvent("onmousebutton", button, down, x, y)
    end
end

function Input:OnRawKey(key, down)
    self.onkey:HandleEvent("onkey", key, down)
    if down then
        return self.onkeydown:HandleEvent(key)
    else
        return self.onkeyup:HandleEvent(key)
    end
end

function Input:OnText(text)
    self.ontextinput:HandleEvent("text", text)
end

function Input:OnGesture(gesture)
    self.ongesture:HandleEvent(gesture)
end

function Input:OnControlMapped(deviceId, controlId, inputId, hasChanged)
    self.oncontrol:HandleEvent("onmap", deviceId, controlId, inputId, hasChanged)
end

function Input:OnFrameStart()
    self.hoverinst = nil
    self.hovervalid = false
end

function Input:SetMousePos(x,y)
    self.raw_mouse_x = x
    self.raw_mouse_y = y

    self.mouse_x = x
    self.mouse_y = (self.h or 1080) - y
end

-- return the mouse in actual mouse coordinates with 0,0 being bottom left
function Input:GetMousePos()
	return self.mouse_x, self.mouse_y
end

-- return the mouse in actual mouse coordinates with 0,0 being center of screen as UI has
function Input:GetUIMousePos()
        return TheFrontEnd:WindowToUI(self:GetMousePos())
end

-- return the mouse in virtual mouse coordinates with 0,0 being center of screen as UI has
function Input:GetVirtualMousePos()
	local mx,my = self:GetUIMousePos()
	mx = mx  / TheFrontEnd.base_scale
	my = my  / TheFrontEnd.base_scale
	return mx, my
end

function Input:GetScreenPosition()
    local x, y = self:GetMousePos()
    return Vector3(x, y, 0)
end

function Input:GetWorldPosition()
    local x, z = TheSim:ScreenToWorldXZ(self:GetMousePos())
    return x ~= nil and z ~= nil and Vector3(x, 0, z) or nil
end

function Input:GetWorldXZ()
	return TheSim:ScreenToWorldXZ(self:GetMousePos())
end

function Input:GetWorldXZWithHeight(height)
	local x, y = self:GetMousePos()
	return TheSim:ScreenToWorldXZ(x, y, height)
end

function Input:GetAllEntitiesUnderMouse()
    return self.mouse_enabled and self.entitiesundermouse or {}
end

function Input:GetAllWorldEntitiesUnderMouse(filter)
	if not self.mouse_enabled then
		return
	end

	local allents = self.entitiesundermouse or {}
	local ret = {}
	-- some entities consist of multiple entities
	local doubles = {}

	for i,v in pairs(allents) do
		if v:IsValid() and
		   v:IsVisible() and 
		   not doubles[v] and
		   v.Transform ~= nil then
			doubles[v] = true
			if not filter or filter and filter(v) then
				table.insert(ret,v)
			end
		end
	end
	return ret
end

function Input:GetWorldEntityUnderMouse()
    return self.mouse_enabled and
        self.hoverinst ~= nil and
        self.hoverinst:IsValid() and
        self.hoverinst:IsVisible() and
        self.hoverinst.Transform ~= nil and
        self.hoverinst or nil
end

function Input:EnableDebugToggle(enable)
    self.enabledebugtoggle = enable
end

function Input:IsDebugToggleEnabled()
    return self.enabledebugtoggle
end

function Input:GetHUDEntityUnderMouse()
    return self.mouse_enabled and
        self.hoverinst ~= nil and
        self.hoverinst:IsValid() and
        self.hoverinst:IsVisible() and
        self.hoverinst.Transform == nil and
        self.hoverinst or nil
end

function Input:IsMouseDown(buttonid)
    return self.mousebuttons[buttonid] == true
end

function Input:IsKeyDown(key)
--    local keyid = InputConstants.Keys[ key ]
--print("Input:IsKeyDown",key,"->",key)
    return self.keys[key] == true
end

function Input:IsControlPressed(control)
    if control then
        local state = self.control_state[control]
        return (state and state.down == true)
    end
    return false
end

-- Hmmm, I feel ControlDown and ControlPressed are slightly different things, but as is, they're not
function Input:IsControlDown(control)
	return self:IsControlPressed(control)
end

function Input:GetAnalogControlValue(control)                         
    if control then
        local state = self.axis_state[control] 
        if state then
            local digital = state.down and 1 or 0                      
            local analog = state.val or 0
            return math.max(digital, analog)
        end
    end
    return 0
end

function Input:IsPasteKey(key)
    if key == InputConstants.Keys.V then
        if PLATFORM == "OSX_STEAM" then
            return self:IsKeyDown(InputConstants.Keys.LGUI) or self:IsKeyDown(InputConstants.Keys.RGUI)
        end
        return self:IsKeyDown(InputConstants.Keys.CTRL)
    end
    return key == InputConstants.Keys.INSERT and PLATFORM == "LINUX_STEAM" and self:IsKeyDown(InputConstants.Keys.SHIFT)
end

function Input:UpdateEntitiesUnderMouse()
	local x, y = self:GetMousePos()
	self.entitiesundermouse = TheSim:GetEntitiesAtScreenPoint(x, y, true, self:IsKeyDown(InputConstants.Keys.ALT))
end

function Input:ForceWorldEntityUnderMouse(ent)
	if self.mouse_enabled then
		if ent ~= self.hoverinst then
			if ent ~= nil and ent.Transform ~= nil then
				ent:PushEvent("mouseover")
			end

			if self.hoverinst ~= nil and self.hoverinst:IsValid() then
				if self.hoverinst.components.prop ~= nil and self.hoverinst.components.prop:IsDragging() then
					self.hoverinst:PushEvent("stopdragging")
				end
				if self.hoverinst.Transform ~= nil then
					self.hoverinst:PushEvent("mouseout")
				end
			end
			self.hoverinst = ent
		end
	end
end

function Input:GetActiveGamepad()
    return self.active_gamepad
end

function Input:SelectHighlightedProp()
	local curprop = self.hoverprop
	local debugent = GetDebugEntity()
	-- no need to filter this query, getentities deals with ALT being held down for only selecting props
	local allprops = TheInput:GetAllWorldEntitiesUnderMouse()
	local index = 1
	for i,v in pairs(allprops) do
		if v == curprop or v==debugent then
			index = i
			if v == debugent then
				-- debugent trumps everything, so that a recently spawned or selected entity always gets preference
				break
			end
		end
	end
	return allprops[index]
end


function Input:OnUpdate(dt)
    self:UpdateRumble(dt)

    for k,v in pairs(self.control_state) do
        if v.down and k.repeat_rate then
            v.rep_time = v.rep_time - dt
            if v.rep_time <= 0 then
                v.rep_time = 1/k.repeat_rate
                self:DoControlRepeat(k)
            end
        end
    end

    if self.mouse_enabled then
		if self.hoverinst ~= nil and
			self.hoverinst.components.prop ~= nil and
			self.hoverinst.components.prop:IsDragging() and
			self.hoverinst:IsValid() then
			return
		end
		-- also for editables
		if self.hoverinst ~= nil and
			self.hoverinst.components.editdraggable ~= nil and
			self.hoverinst.components.editdraggable:IsDragging() and
			self.hoverinst:IsValid() then
			return
		end

    	self:UpdateEntitiesUnderMouse()

        local inst = self.entitiesundermouse[1]
        if inst ~= nil and inst.CanMouseThrough ~= nil then
            local mousethrough, keepnone = inst:CanMouseThrough()
            if mousethrough then
                for i = 2, #self.entitiesundermouse do
                    local nextinst = self.entitiesundermouse[i]
                    if nextinst == nil or
                        nextinst:HasTag("player") or
                        (nextinst.Transform ~= nil) ~= (inst.Transform ~= nil) then
                        if keepnone then
                            inst = nextinst
                            mousethrough, keepnone = false, false
                        end
                        break
                    end
                    inst = nextinst
                    if nextinst.CanMouseThrough == nil then
                        mousethrough, keepnone = false, false
                    else
                        mousethrough, keepnone = nextinst:CanMouseThrough()
                    end
                    if not mousethrough then
                        break
                    end
                end
                if mousethrough and keepnone then
                    inst = nil
                end
            end
        end

        if inst ~= self.hoverinst then
            if inst ~= nil and inst.Transform ~= nil then
                inst:PushEvent("mouseover")
            end

            if self.hoverinst ~= nil and self.hoverinst.Transform ~= nil then
                self.hoverinst:PushEvent("mouseout")
            end

            self.hoverinst = inst
        end
    end

    -- select active prop
    if DEV_MODE then
	local lastprop = self.hoverprop
	if TheInput:IsKeyDown(InputConstants.Keys.ALT) then
	        local newprop = self:SelectHighlightedProp()
		if newprop ~= lastprop or not self.hadproplastframe then
			if lastprop then
		                lastprop:PushEvent("propmouseout")
			end
			if newprop then
		                newprop:PushEvent("propmouseover")
				self.hoverprop = newprop
			end
			self.hadproplastframe = (newprop ~= nil)
		end
	else
		if lastprop then
	                lastprop:PushEvent("propmouseout")
			-- this is only there so that if we highlight a non-top prop and then start highlighting again we will 
			-- select that prop, rather than the top one
			self.hadproplastframe = false
		end
	end
    end
end

function Input:GetLocalizedControl(deviceId, controlId, use_default_mapping, use_mapper)
    local device, numInputs, input1, input2, input3, input4, intParam = TheInputProxy:GetLocalizedControl(deviceId, controlId, use_default_mapping == true, use_mapper ~= false)

    if device == nil then
        return STRINGS.UI.CONTROLSSCREEN.INPUTS[9][1]
    elseif numInputs < 1 then
        return ""
    end

    local inputs = { input1, input2, input3, input4 }
    local text = STRINGS.UI.CONTROLSSCREEN.INPUTS[device][input1]
    -- concatenate the inputs
    for idx = 2, numInputs do
        text = text.." + "..STRINGS.UI.CONTROLSSCREEN.INPUTS[device][inputs[idx]]
    end

    -- process string format params if there are any
    return intParam ~= nil and string.format(text, intParam) or text
end

function Input:GetControlIsMouseWheel(controlId)
    if self:ControllerAttached() then
        return false
    end
    local localized = self:GetLocalizedControl(0, controlId)
    local stringtable = STRINGS.UI.CONTROLSSCREEN.INPUTS[1]
    return localized == stringtable[1003] or localized == stringtable[1004]
end

function Input:GetStringIsButtonImage(str)
    return table.contains(STRINGS.UI.CONTROLSSCREEN.INPUTS[2], str)
        or table.contains(STRINGS.UI.CONTROLSSCREEN.INPUTS[4], str)
        or table.contains(STRINGS.UI.CONTROLSSCREEN.INPUTS[5], str)
        or table.contains(STRINGS.UI.CONTROLSSCREEN.INPUTS[7], str)
        or table.contains(STRINGS.UI.CONTROLSSCREEN.INPUTS[8], str)
end

function Input:PlatformUsesVirtualKeyboard()
	if IsConsole() then
		return true
	end

	return false
end

-- KAJ: Hmmm, I don't think this would survive a sim-reset unless it's being re-sent
function Input:OnScreenResize(w,h)
    self.w = w
    self.h = h
end

---------------- Globals

TheInput = Input()

function OnPosition(x, y)
end

function OnControl(control, digitalvalue, analogvalue)
end

function OnMouseButton(button, is_up, x, y)
end

function OnMouseMove(x, y)
end

function OnInputKey(key, is_up)
end

function OnInputText(text)
end

function OnGesture(gesture)
    TheInput:OnGesture(gesture)
end

function OnControlMapped(deviceId, controlId, inputId, hasChanged)
    TheInput:OnControlMapped(deviceId, controlId, inputId, hasChanged)
end

function Input:OnMouseMove(x, y)
    self:SetMousePos(x, y)
    self:UpdatePosition(x, y)
    if self.mouse_enabled then
        TheFrontEnd:OnMouseMove(x, y)
    end
end

function Input:SetActiveGamepad(gamepad_id)
    self.active_gamepad = gamepad_id
end

function Input:GetActiveGamepad()
    return self.active_gamepad
end

function Input:OnMouseButtonDown(x, y, button, device)
    -- TODO_KAJ
    local simulate_touch_mode = false -- TheGame:GetLocalSettings().SIMULATE_TOUCH_MODE
    if not self:OnMouseButton(button, true, x, y) then
        self:OnMouseButtonDownInternal(x, y, button, simulate_touch_mode and "touch" or device or "mouse")
    end
end

function Input:OnMouseButtonUp(x, y, button, device)
    -- TODO_KAJ
    local simulate_touch_mode = false -- TheGame:GetLocalSettings().SIMULATE_TOUCH_MODE
    if not self:OnMouseButton(button, false, x, y) then
        self:OnMouseButtonUpInternal(x, y, button, simulate_touch_mode and "touch" or device or "mouse")
    end
    -- KAJ: I am torn about whether I should put this in LockFocus(false)
    TheFrontEnd:UpdateFocusedWidget()
end

function Input:OnMouseButtonDownInternal(x, y, button, device_type)
    self:OnMouseMove(x, y, device_type)

    local button_id = InputConstants.MouseButtonById[button]
    local bindings = button_id and self.mousebindings[button_id]
    self.control_set:Clear()
    if bindings then
        for k,v in ipairs(bindings) do
            if self:CheckModifiers(v) then
                self.control_set:AddControl( v.control )
            end
        end
    end
    
    if not self.control_set:IsEmpty() then
        self:DoControlDown( self.control_set, device_type )
    end

    self.last_input_device = "mouse"
end

function Input:OnMouseButtonUpInternal(x, y, button, device_type)
    self:OnMouseMove(x, y, device_type)

    local button_id = InputConstants.MouseButtonById[button]
    local bindings = button_id and self.mousebindings[button_id]
    self.control_set:Clear()
    if bindings then
        for k,v in pairs(bindings) do
            if self:CheckModifiers(v) then
                self.control_set:AddControl( v.control )
            end
        end
    end
    if not self.control_set:IsEmpty() then
        self:DoControlUp( self.control_set, device_type )
    end
end


function Input:OnMouseWheel(wheel)
    if wheel > 0 then
        self:OnMouseButtonDown(self.raw_mouse_x, self.raw_mouse_y, 1003, "mouse")
        self:OnMouseButtonUp(self.raw_mouse_x, self.raw_mouse_y, 1003, "mouse")
    elseif wheel < 0 then
        self:OnMouseButtonDown(self.raw_mouse_x, self.raw_mouse_y, 1004, "mouse")
        self:OnMouseButtonUp(self.raw_mouse_x, self.raw_mouse_y, 1004, "mouse")
    end
end


function Input:RegisterMouseButtonDown(buttonid, down)
    self.mousebuttons[buttonid] = down
end


function Input:RegisterKeyDown(keyid, down)
    local metakeys =
	{
		[InputConstants.Keys.LCTRL]  = InputConstants.Keys.CTRL,
		[InputConstants.Keys.RCTRL]  = InputConstants.Keys.CTRL,
		[InputConstants.Keys.LSHIFT] = InputConstants.Keys.SHIFT,
		[InputConstants.Keys.RSHIFT] = InputConstants.Keys.SHIFT,
		[InputConstants.Keys.LALT]   = InputConstants.Keys.ALT,	
		[InputConstants.Keys.RALT]   = InputConstants.Keys.ALT,	
	}
    self.keys[keyid] = down
    local meta = metakeys[keyid]
    if meta then
        self.keys[meta] = down
    end
end

function Input:IsModifierControl()
    return self:IsKeyDown(InputConstants.Keys.LCTRL) or self:IsKeyDown(InputConstants.Keys.RCTRL)
end

function Input:IsModifierShift()
    return self:IsKeyDown(InputConstants.Keys.LSHIFT) or self:IsKeyDown(InputConstants.Keys.RSHIFT)
end

function Input:IsModifierAlt()
    return self:IsKeyDown(InputConstants.Keys.LALT) or self:IsKeyDown(InputConstants.Keys.RALT)
end

function Input:IsModifierAny()
    return self:IsModifierControl() or self:IsModifierShift() or self:IsModifierAlt()
end

function Input:IsModifierKey(key)
    local is = key == "LCTRL" or key == "RCTRL" or
            key == "LALT" or key == "RALT" or
            key == "LSHIFT" or key == "RSHIFT"
    return is
end

function Input:CheckModifiers( binding )
    if binding.ANYMOD then
        return true
    end

    local ctrl = self:IsModifierControl()
    local alt = self:IsModifierAlt()
    local shift = self:IsModifierShift()

    local match = ((binding.CTRL ~= nil) == ctrl) and
            ((binding.SHIFT ~= nil) == shift) and
            ((binding.ALT ~= nil) == alt)
    return match
end


-- This was on game in GL.
function Input:OnControlDown(control, device_type, device_id)


    if self.debug and device_type == "gamepad" then
        if control == Controls.Digital.TOGGLE_DEBUG_MENU then 
            self.debug:TogglePanel()
            
            self.debug_using_gamepad = self.debug:DebugPanelsOpen()
            return true
        end

        if self.debug_using_gamepad and self.debug:DebugPanelsOpen() then
            return true
        end
    end        
    

    if self.debug == nil or not self.debug:IsConsoleDocked() then
        if TheFrontEnd:OnControlDown(control, device_type, nil, device_id) then
            return true
        end
       	self.oncontrol:HandleEvent(control, true)
       	self.oncontrol:HandleEvent("oncontrol", control, true)
    end

    if self.debug and self.debug:OnControlDown( control, device_type ) then
        return true
    end

    if control == Controls.Digital.FEEDBACK then 
        self:StartFeedback()
        return true
    end

end


function Input:DoControlDown( control_set, device_type, device_id )
    if device_type == "gamepad" and self.ignore_gamepad then
        return false
    end

    for i, control in ipairs( control_set.controls ) do
--        local state = self.control_state[control]

        local digitalstate = self.control_state[control] 
        local analogstate = self.axis_state[control]
        local state = digitalstate or analogstate

        if state then
      	    if not state.down then
                state.down = true
                if control.repeat_rate then
                    state.rep_time = 1/control.repeat_rate
                end
                if digitalstate then
                    self:OnControlDown( control, device_type, device_id )
                end
	    	end
        end
    end
--    if not control_set:IsEmpty() then
--        return self:OnControlDown( control_set, device_type, device_id )
--    end
end



-- this was in Game in GL
function Input:OnControlUp(control, device_type, device_id)

    if self.debug and self.debug_using_gamepad and device_type == "gamepad" and self.debug:DebugPanelsOpen() then
        return true
    end        

    if self.debug == nil or not self.debug:IsConsoleDocked() then
        if TheFrontEnd:OnControlUp(control, device_type, device_id) then
            return true
        end
        self.oncontrol:HandleEvent(control, false)
        self.oncontrol:HandleEvent("oncontrol", control, false)
    end
end



function Input:DoControlUp( control_set, device_type, device_id )
    if device_type == "gamepad" and self.ignore_gamepad then
        return false
    end

    for i, control in ipairs( control_set.controls ) do
	-- map digital to analog inputs as well
        local digitalstate = self.control_state[control] 
        local analogstate = self.axis_state[control]
        local state = digitalstate or analogstate
        -- we need to make sure the control was down, not just the key
        -- as there may be multiple controls bound to one key, with different modifiers
        if state then
	    if state.down then
                state.down = false
                if digitalstate then
                    self:OnControlUp( control, device_type, device_id )
                end
            end
        end
    end

--    if not control_set:IsEmpty() then
--        return self:OnControlUp( control_set, device_type, device_id )
--    end
end




function Input:DoControlRepeat(control)
    local control_set = ControlSet()
    control_set:AddControl(control)
    self:DoControlUp( control_set )
    self:DoControlDown( control_set )
end



function Input:OnKeyDown(keyid, modifiers)
    self.no_input_time = 0
    self:RegisterKeyDown(keyid, true)   

    local key = InputConstants.KeyById[keyid]
    if not key then print( "Invalid key:", keyid) return end

    if self:OnRawKey(keyid, true) then
        return true
    end
    
    local bindings = self.keybindings[key]
    self.control_set:Clear()
    if bindings then
        for k,v in ipairs(bindings) do
            if (self:IsModifierKey(key) or self:CheckModifiers(v)) then
                self.control_set:AddControl( v.control )
            end
        end
    end
    if not self.control_set:IsEmpty() then
        self:DoControlDown( self.control_set, "key" )
    end
    self.last_input_device = "key"
end


function Input:OnKeyRepeat(keyid, modifiers)
    -- for now, just call OnKeyDown
    self:OnKeyDown(keyid, modifiers)
end

function Input:OnKeyUp(keyid, modifiers)
    self.no_input_time = 0
    if self.keys[keyid] then
        self:RegisterKeyDown(keyid, false)   

        local key = InputConstants.KeyById[keyid]
        if not key then return end

        if self:OnRawKey(keyid, false) then
            return true
        end

        local bindings = self.keybindings[key]
        self.control_set:Clear()
        if bindings then
            for k,v in ipairs(bindings) do
                self.control_set:AddControl( v.control )
            end
        end
    
        if not self.control_set:IsEmpty() then
            self:DoControlUp( self.control_set, "key" )
        end
    end
end




function Input:OnGamePadButtonDown(gamepad_id, button)
    self.no_input_time = 0
    if self.gamepads[gamepad_id] then
        self.gamepads[gamepad_id][InputConstants.GamepadButtonById[button]] = true;

        if self.active_gamepad ~= gamepad_id then
            self:SetActiveGamepad( gamepad_id )
        end

        local button_id = InputConstants.GamepadButtonById[button]
        local bindings = button_id and self.gamepadbindings[button_id]
        self.control_set:Clear()

        if bindings then
            for k,v in pairs(bindings) do

--                if LEFT_STICK_BUTTONS[ button_id ] then
--                    -- This is a left stick button
--                    if self.left_stick_digital_forwarding then
--                        -- If digital forwarding is enabled, trigger the digital binding
--                        self.control_set:AddControl( v.control )
--                    end
--                elseif RIGHT_STICK_BUTTONS[ button_id ] then
--                    -- This is a right stick button
--                    if self.right_stick_digital_forwarding then
--                        -- If digital forwarding is enabled, trigger the digital binding
--                        self.control_set:AddControl( v.control )
--                    end
--                else
                    self.control_set:AddControl( v.control )
--                end

            end
        end

        if not self.control_set:IsEmpty() then
            self:DoControlDown( self.control_set, "gamepad", self.gamepads[self.active_gamepad].name )
        end
    end
    self.last_input_device = "gamepad"
end

function Input:OnGamePadButtonRepeat(gamepad_id, button)
	self:OnGamePadButtonDown(gamepad_id, button)
end


function Input:OnGamePadButtonUp(gamepad_id, button)
    self.no_input_time = 0    

    if self.gamepads[gamepad_id] then
        self.gamepads[gamepad_id][InputConstants.GamepadButtonById[button]] = false;

        if self.active_gamepad == gamepad_id then
            local button_id = InputConstants.GamepadButtonById[button]
            local bindings = button_id and self.gamepadbindings[button_id]
            self.control_set:Clear()

            -- Do we need to check modifiers?
            if bindings then
                for k,v in pairs(bindings) do
                    self.control_set:AddControl( v.control )
                end
            end
            if not self.control_set:IsEmpty() then
                self:DoControlUp( self.control_set, "gamepad", self.gamepads[self.active_gamepad].name )
            end
        end
    end
end


function Input:OnTextInput(text)
    self:OnText(text)
end

function Input:UpdateRumble(dt)
    
    local active_gamepad = self:GetActiveGamepad()
    if active_gamepad then
        local small_rumble_value = 0
        local large_rumble_value = 0

        local to_remove
        for k,rumble_instance in ipairs(self.playing_rumbles) do
            rumble_instance.time = rumble_instance.time + (dt * rumble_instance.speed)
            if rumble_instance.rumble:IsDoneAtTime(rumble_instance.time) then
                to_remove = to_remove or {}
                table.insert(to_remove, rumble_instance)
            else
                local small, large = rumble_instance.rumble:GetValues(rumble_instance.time)
                small_rumble_value = small_rumble_value + small*rumble_instance.amp
                large_rumble_value = large_rumble_value + large*rumble_instance.amp
            end
        end

        if to_remove then
            for k,v in ipairs(to_remove) do
                self:KillRumble(v)
            end
        end

        TheSim:GamepadRumble(active_gamepad, small_rumble_value, large_rumble_value)

        self.small_rumble_value, self.large_rumble_value = small_rumble_value, large_rumble_value
    else
        self:ClearRumble()
    end

    for k,v in pairs(self.gamepads) do
        if k ~= active_gamepad then
            TheSim:GamepadRumble(k, 0, 0)
        end
    end

end

function Input:PlayRumble(rumble, speed, amp)
	if not TheInputProxy.enable_vibration then
		return
	end
    rumble = type(rumble) == "string" and GetRumble(rumble) or rumble
    if rumble then
        local rumble_instance = {rumble = rumble, time = 0, speed = speed or 1, amp = amp or 1}
        table.insert(self.playing_rumbles, rumble_instance) 

        return rumble_instance
    end
end

function Input:KillRumble(rumble_instance)
    table.arrayremove(self.playing_rumbles, rumble_instance)
end

function Input:ClearRumble()
    table.clear(self.playing_rumbles)
end

function Input:OnGamepadConnected(gamepad_id, gamepad_name)
    self.gamepads[gamepad_id] = {}
    self.gamepads[gamepad_id].name = gamepad_name;
    self:SetActiveGamepad( gamepad_id )
end

function Input:OnGamepadDisconnected(gamepad_id)
    self.gamepads[gamepad_id] = nil

    if self.active_gamepad == gamepad_id then
        local k, v = next(self.gamepads)
        if k then
            self.active_gamepad = k
        else
            self.active_gamepad = nil
        end
    end
end

function Input:OnGamepadAnalogInput(gamepad_id, ls_x, ls_y, rs_x, rs_y, lt, rt)
	local getButton = {
		LS_LEFT = function()
				return -1 * math.clamp(ls_x, -1, 0)
			  end,
		LS_RIGHT = function()
				return  math.clamp(ls_x, 0, 1)
			  end,
		LS_UP = function()
				return  math.clamp(ls_y, 0, 1)
			  end,
		LS_DOWN = function()
				return -1 * math.clamp(ls_y, -1, 0)
			  end,
		RS_LEFT = function()
				return -1 * math.clamp(rs_x, -1, 0)
			  end,
		RS_RIGHT = function()
				return  math.clamp(rs_x, 0, 1)
			  end,
		RS_UP = function()
				return  math.clamp(rs_y, 0, 1)
			  end,
		RS_DOWN = function()
				return -1 * math.clamp(rs_y, -1, 0)
			  end,
		LT = function()
				return -1 * math.clamp(lt, 0, 1)
			  end,
		RT = function()
				return -1 * math.clamp(rt, 0, 1)
			  end,
	}

	if self.gamepads[gamepad_id] then
        	self.gamepads[gamepad_id].ls_x = ls_x;
        	self.gamepads[gamepad_id].ls_y = ls_y;
        	self.gamepads[gamepad_id].rs_x = rs_x;
        	self.gamepads[gamepad_id].rs_y = rs_y;
        	self.gamepads[gamepad_id].lt = lt;
        	self.gamepads[gamepad_id].rt = rt;
	end

    for k,v in pairs(Controls.Analog) do
        local state = self.axis_state[v]
	if state then
		local lookup = self.gamepad_lookup[v]
		if lookup then
			--print("button:",lookup[1].button)
			--print("value:",state.val)
			local func = getButton[lookup[1].button]
			if func then
				state.val = func()
			end
		end
	end
    end
end

-- shim
function Input:IsMousePosReset()
--	print("*** TODO: Input:IsMousePosReset ***")
	return false
end

return Input
